CREATE OR REPLACE TYPE pobledat_type AS OBJECT (
	pobl INTEGER,
	edat INTEGER
);
CREATE OR REPLACE TYPE pobledat_type_nt AS TABLE OF pobledat_type;

CREATE OR REPLACE TYPE candval_type AS OBJECT (
	cand INTEGER,
	val INTEGER
);
CREATE OR REPLACE TYPE candval_type_nt AS TABLE OF candval_type;

CREATE TABLE  poll_answers(
  ref INTEGER,
  pobledat pobledat_type_nt,
  candval candval_type_nt,
  resposta_1 VARCHAR2(10),
  resposta_2 VARCHAR2(10),
  resposta_3 VARCHAR2(10),
  resposta_4 VARCHAR2(10),
  resposta_5 VARCHAR2(10)
)NESTED TABLE pobledat STORE AS pe_tab_1
NESTED TABLE candval STORE AS cv_tab_1
PCTFREE 0 ENABLE ROW MOVEMENT;

----------------------------- INSERTS
DECLARE
  j INTEGER;
  maxTuples CONSTANT INTEGER := 20000;
  maxPobl CONSTANT INTEGER := 200;
  maxEdat CONSTANT INTEGER := 100;  
  maxCand CONSTANT INTEGER := 10;
  maxVal CONSTANT INTEGER := 10;  
BEGIN
DBMS_RANDOM.seed(0);
-- Insertions 
FOR j IN 1..(maxTuples) LOOP
    INSERT INTO poll_answers(ref,
    pobledat, candval,
    resposta_1,resposta_2,resposta_3,resposta_4,resposta_5)--,resposta_6,resposta_7,resposta_8,resposta_9,resposta_10) 
    VALUES (
    j, 
    pobledat_type_nt(pobledat_type(dbms_random.value(1, maxPobl), dbms_random.value(1,maxEdat))),
    candval_type_nt(candval_type(dbms_random.value(1, maxCand), dbms_random.value(1, maxVal))),
    LPAD(dbms_random.string('U',50),10,'-'),
    LPAD(dbms_random.string('U',50),10,'-'),
    LPAD(dbms_random.string('U',50),10,'-'),
    LPAD(dbms_random.string('U',50),10,'-'),
    LPAD(dbms_random.string('U',50),10,'-')
  );
END LOOP;
END;

COMMIT;

ALTER TABLE poll_answers SHRINK SPACE;


CREATE VIEW view1 AS (SELECT p1.pobl AS a, MIN(p1.edat) AS b, MAX(p1.edat) AS c, COUNT(*) AS d FROM poll_answers pa , TABLE(pa.pobledat) p1 GROUP BY pobl);

CREATE VIEW view2 AS (SELECT p1.pobl AS a, p1.edat AS b, p2.cand AS c, MAX(p2.val) AS d, MIN(p2.val) AS e, AVG(p2.val) AS f 
									FROM poll_answers pa, TABLE(pa.pobledat) p1, TABLE(pa.candval) p2 GROUP BY pobl, edat, cand);

CREATE VIEW view3 AS (SELECT p1.cand AS a, AVG(p1.val) AS b FROM poll_answers pa, TABLE(pa.candval) p1 GROUP BY cand);

SELECT * FROM view1;
SELECT * FROM view2;
SELECT * FROM view3;
---------------------

--CREACIÃ“ DE BITMAP
ALTER TABLE poll_answers MINIMIZE RECORDS_PER_BLOCK;
CREATE BITMAP INDEX bitmapIndex1 ON pe_tab_1(pobl,edat)PCTFREE 0;
CREATE BITMAP INDEX bitmapIndex2 ON cv_tab_1(cand,val)PCTFREE 0;

 ------------------------------------------- Update Statistics ---------------------------
DECLARE
esquema VARCHAR2(100);
CURSOR c IS SELECT TABLE_NAME FROM USER_TABLES UNION SELECT TABLE_NAME FROM USER_OBJECT_TABLES;
BEGIN
SELECT '"'||sys_context('USERENV', 'CURRENT_SCHEMA')||'"' INTO esquema FROM dual;
FOR taula IN c LOOP
  DBMS_STATS.GATHER_TABLE_STATS( 
    ownname => esquema, 
    tabname => taula.table_name, 
    estimate_percent => NULL,
    method_opt =>'FOR ALL COLUMNS SIZE REPEAT',
    granularity => 'GLOBAL',
    cascade => TRUE
    );
  END LOOP;
END;

---------------------------- To check the real costs -------------------------

--DELETE FROM measure;
CREATE TABLE measure (id INTEGER, weight FLOAT, i FLOAT, f FLOAT);

DECLARE 
i0 INTEGER;
i1 INTEGER;
i2 INTEGER;
i3 INTEGER;
r INTEGER;
BEGIN
select value INTO i0 from v$statname c, v$sesstat a where a.statistic# = c.statistic# and sys_context('USERENV','SID') = a.sid and c.name in ('consistent gets');

SELECT MAX(LENGTH(a||b||c||d)) INTO r FROM (SELECT a, b, c, d
FROM view1
);
 
select value INTO i1 from v$statname c, v$sesstat a where a.statistic# = c.statistic# and sys_context('USERENV','SID') = a.sid and c.name in ('consistent gets');

SELECT MAX(LENGTH(a||b||c||d||e||f)) INTO r FROM (SELECT a, b, c, d, e, f
FROM view2
);

select value INTO i2 from v$statname c, v$sesstat a where a.statistic# = c.statistic# and sys_context('USERENV','SID') = a.sid and c.name in ('consistent gets');

SELECT MAX(LENGTH(a||b)) INTO r FROM (SELECT a,b
FROM view3
);

select value INTO i3 from v$statname c, v$sesstat a where a.statistic# = c.statistic# and sys_context('USERENV','SID') = a.sid and c.name in ('consistent gets');

INSERT INTO measure (id,weight,i,f) VALUES (1,0.2,i0,i1);
INSERT INTO measure (id,weight,i,f) VALUES (2,0.3,i1,i2);
INSERT INTO measure (id,weight,i,f) VALUES (3,0.5,i2,i3);
END;

--SELECT * FROM MEASURE;
SELECT SUM((f-i)*weight) FROM measure;
DROP TABLE measure PURGE;

Begin
for t in (select view_name from user_views) loop
execute immediate ('drop view '||t.view_name);
end loop;
for t in (select mview_name from user_mviews) loop
execute immediate ('drop materialized view '||t.mview_name);
end loop;
for t in (select table_name from user_tables) loop
execute immediate ('drop table '||t.table_name||' cascade constraints');
end loop;
for c in (select cluster_name from user_clusters) loop
execute immediate ('drop cluster '||c.cluster_name);
end loop;
for i in (select index_name from user_indexes) loop
execute immediate ('drop index '||i.index_name);
end loop;
for i in (select type_name from user_types where typecode = 'COLLECTION') loop
execute immediate ('drop type '||i.type_name);
end loop;
for i in (select type_name from user_types) loop
execute immediate ('drop type '||i.type_name);
end loop;
execute immediate ('purge recyclebin');
End;


SELECT SUM(BLOCKS) FROM USER_TS_QUOTAS
SELECT blocks FROM USER_TABLES WHERE table_name = 'poll_answers'
SELECT blocks FROM USER_ts_quotas WHERE tablespace_name = 'USERS'
SELECT * FROM user_segments